{{-func hasParameters(method)
	ret (method.parameters | array.size) > 0
end-}}

// <auto-generated>
//     This code was generated by EasyTdd.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Use a partial class for additional behavior.
// </auto-generated>

{{~if isNullableEnabled-}}
#nullable enable

{{~end-}}

{{~ for namespace in usingNamespaces -}}
using {{namespace}};
{{~end~}}

namespace {{namespace}}
{
	public partial class {{className}} : Mock<{{targetTypeName}}>
	{{~for typeRestrictions in typeParameterRestrictions ~}}
		where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
	{{~end~}}
	{
		public {{constructorName}}() : base(MockBehavior.Strict)
		{ }
		{{~for method in methods~}}
		{{~if method.hasResult~}}

		public {{className}} Setup{{method.fullName}}(
			Func<{{method.resultType}}> result,
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			bool verifiable = true)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var setup = Setup(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				)
				.Returns{{if method.isTask}}Async{{end}}(result);

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~if hasParameters method~}}

		public {{className}} Setup{{method.fullName}}(
			Func<{{for parameter in method.parameters}}{{parameter.type}}, {{end}}{{method.resultType}}> result,
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			bool verifiable = true)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var setup = Setup(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				)
				.Returns{{if method.isTask}}Async{{end}}(result);

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~end~}}

		public {{className}} Setup{{method.name}}Sequence{{method.genericParameters}}(
			IEnumerable<Func<{{method.resultType}}>> results{{if method.parameters.size > 0}},{{end}}
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null{{if !for.last}},{{end}}
			{{-end}})
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var sequenceSetup =
				SetupSequence(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				);

			foreach (var result in results)
			{
				sequenceSetup.Returns{{if method.isTask}}Async{{end}}(result);
			}

			return this;
		}

		public {{className}} Verify{{method.fullName}}(
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			Func<Times>{{if isNullableEnabled}}?{{end}} times = null)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			Verify(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					),
					times ?? Times.AtLeastOnce
				);

			return this;
		}
		{{~else if !method.hasResult && method.isTask~}}

		public {{className}} Setup{{method.fullName}}(
			Func<{{method.returnType}}>{{if isNullableEnabled}}?{{end}} result = null,
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			bool verifiable = true)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var setup = Setup(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				)
				.Returns(result?.Invoke() ?? {{method.returnType}}.CompletedTask);

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~if hasParameters method~}}

		public {{className}} Setup{{method.fullName}}(
			Func<{{for parameter in method.parameters}}{{parameter.type}}, {{end}}{{method.returnType}}>{{if isNullableEnabled}}?{{end}} result = null,
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			bool verifiable = true)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var setup = Setup(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				)
				.Returns(result ?? (({{for parameter in method.parameters}}{{parameter.originalName.camelCase}}{{if !for.last}}, {{end}}{{end}}) => {{method.returnType}}.CompletedTask));

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~end~}}

		public {{className}} Setup{{method.name}}Sequence{{method.genericParameters}}(
			IEnumerable<Func<{{method.returnType}}>> results{{if method.parameters.size > 0}},{{end}}
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null{{if !for.last}},{{end}}
			{{-end}})
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var sequenceSetup =
				SetupSequence(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				);

			foreach (var result in results)
			{
				sequenceSetup.Returns(result);
			}

			return this;
		}

		public {{className}} Verify{{method.fullName}}(
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			Func<Times>{{if isNullableEnabled}}?{{end}} times = null)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			Verify(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					),
					times ?? Times.AtLeastOnce
				);

			return this;
		}
		{{~else if !method.hasResult && !method.isTask~}}

		public {{className}} Setup{{method.fullName}}(
			Action{{if hasParameters method}}<{{for parameter in method.parameters}}{{parameter.type}}{{if !for.last}}, {{end}}{{end}}>{{end}}{{if isNullableEnabled}}?{{end}} callback = null,
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			bool verifiable = true)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var setup = Setup(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				);

			if (callback != null)
			{
				setup.Callback(callback);
			}

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}

		public {{className}} Setup{{method.name}}Sequence{{method.genericParameters}}(
			IEnumerable<Func<Exception>> results{{if method.parameters.size > 0}},{{end}}
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null{{if !for.last}},{{end}}
			{{-end}})
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			var sequenceSetup =
				SetupSequence(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					)
				);

			foreach (var result in results)
			{
				if (result == null)
				{
					sequenceSetup.Pass();
					continue;
				}

				sequenceSetup.Throws(result());
			}

			return this;
		}

		public {{className}} Verify{{method.fullName}}(
			{{-for parameter in method.parameters}}
			Func<{{parameter.type}}, bool>{{if isNullableEnabled}}?{{end}} is{{parameter.originalName.pascalCase}} = null,
			{{-end}}
			Func<Times>{{if isNullableEnabled}}?{{end}} times = null)
		{{~for typeRestrictions in method.typeParameterRestrictions ~}}
			where {{typeRestrictions.name}} : {{for restriction in typeRestrictions.restrictions}}{{restriction}}{{if !for.last}}, {{end}}{{end}}
		{{~end~}}
		{
			Verify(
					x => x.{{method.name}}(
					{{~for parameter in method.parameters~}}
						It.Is<{{parameter.type}}>(fromMock => is{{parameter.originalName.pascalCase}} == null || is{{parameter.originalName.pascalCase}}(fromMock)){{if !for.last}},{{end}}
					{{~end~}}
					),
					times ?? Times.AtLeastOnce
				);

			return this;
		}
		{{~end~}}
		{{~end~}}
		{{~for property in properties~}}
		{{~if property.hasGetter~}}

		public {{className}} SetupGet{{property.name}}(
			Func<{{property.returnType}}> result,
			bool verifiable = true)
		{
			var setup = SetupGet(x => x.{{property.name}})
				.Returns(result);

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~end~}}
		{{~if property.hasSetter~}}

		public {{className}} SetupSet{{property.name}}(
			bool verifiable = true)
		{
			var setup = SetupSet(x => x.{{property.name}} = It.IsAny<{{property.returnType}}>());

			if (verifiable)
			{
				setup.Verifiable();
			}

			return this;
		}
		{{~end~}}
		{{~end~}}
	}
}